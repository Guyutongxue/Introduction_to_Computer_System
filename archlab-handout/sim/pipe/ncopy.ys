# PKU ICS ArchLab Handin (Part C)
#
# @file ncopy.ys
# @author Guyutongxue <1900012983@pku.edu.cn>
# 
# This file is distributed under WTFPL <https://www.wtfpl.net> WITHOUT ANY WARRANTY.

# CHANGE TO THIS FILE
# ===================
# - Use instruction `iaddq`.
# - Do the loop unrolling. (10 elements for 1 loop)
# - Dealing with remaiders:
#            (remainder)
#             [0 ... 9]
#                 |
#       +---------+---------+
#      /          |          \  (rLeast2)
#     0           1       [2 ... 9]  <------------+
#  (rOnly0)    (rOnly1)       |                   |
#                      +------+------+            | -= 2
#                     /       |       \           |
#                    2        3    [4 ... 9] -----+
#                (rOnly2)  (rOnly3)  (rLeast4)                 

#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	iaddq $-10,%rdx
	jl remainder
loopBegin:	
	mrmovq 0x00(%rdi), %r8
	mrmovq 0x08(%rdi), %r9
	mrmovq 0x10(%rdi), %r10
	mrmovq 0x18(%rdi), %r11
	mrmovq 0x20(%rdi), %r12
	mrmovq 0x28(%rdi), %r13
	mrmovq 0x30(%rdi), %r14
	mrmovq 0x38(%rdi), %rcx
	mrmovq 0x40(%rdi), %rbx
	mrmovq 0x48(%rdi), %rbp
ele0:
	rmmovq %r8,  0x00(%rsi)
	rmmovq %r9,  0x08(%rsi)
	andq %r8,%r8
	jle ele1
	iaddq $1, %rax
ele1:
	andq %r9,%r9
	jle ele2
	iaddq $1, %rax
ele2:
	rmmovq %r10, 0x10(%rsi)
	rmmovq %r11, 0x18(%rsi)
	andq %r10,%r10
	jle ele3
	iaddq $1, %rax
ele3:
	andq %r11,%r11
	jle ele4
	iaddq $1, %rax
ele4:
	rmmovq %r12, 0x20(%rsi)
	rmmovq %r13, 0x28(%rsi)
	andq %r12,%r12
	jle ele5
	iaddq $1, %rax
ele5:
	andq %r13,%r13
	jle ele6
	iaddq $1, %rax
ele6:
	rmmovq %r14, 0x30(%rsi)
	rmmovq %rcx, 0x38(%rsi)
	andq %r14,%r14
	jle ele7
	iaddq $1, %rax
ele7:
	andq %rcx,%rcx
	jle ele8
	iaddq $1, %rax
ele8:
	rmmovq %rbx, 0x40(%rsi)
	rmmovq %rbp, 0x48(%rsi)
	andq %rbx, %rbx
	jle ele9
	iaddq $1, %rax
ele9:
	andq %rbp, %rbp
	jle decrease
	iaddq $1, %rax
decrease:
	iaddq $80, %rdi
	iaddq $80, %rsi
	iaddq $-10, %rdx
	jge loopBegin
remainder:                 # %rdx in [-10 ... -1],       represents r in [0 ... 9]
	iaddq $9, %rdx         # %rdx in [-1, 0, 1, ..., 8], represents r in [0, 1, 2, ..., 9]
	jg rLeast2             # %rdx in [1 ... 8],          represents r in [2 ... 9]
	mrmovq 0x00(%rdi), %r8 # (Prevent L/U harzard)
	jl Done                # %rdx == -1,                 represents r == 0 (rOnly0)
rOnly1:                    # %rdx == 0,                  represents r == 1
	rmmovq %r8, 0x00(%rsi)
		andq %r8, %r8
		jle Done
		iaddq $1, %rax
	ret
rLeast2:                   # %rdx in [1 ... ],         represents r in [2 ... ]
	mrmovq 0x00(%rdi), %r8 
	mrmovq 0x08(%rdi), %r9
	iaddq $-2, %rdx        # %rdx in [-1, 0, 1, ... ], represents r in [2 ... ]
	jg rLeast4             # %rdx in [1 ... ],         represents r in [4 ... ]
	je rOnly3              # %rdx == 0,                represents r == 3
rOnly2:                    # %rdx == -1,               represents r == 2
	rmmovq %r8, 0x00(%rsi)
	rmmovq %r9, 0x08(%rsi)
	rOnly2_ele0:
		andq %r8, %r8
		jle rOnly2_ele1
		iaddq $1, %rax
	rOnly2_ele1:
		andq %r9, %r9
		jle Done
		iaddq $1, %rax
	ret
rOnly3:
	mrmovq 0x10(%rdi), %r10
	rmmovq %r8,  0x00(%rsi)
	rmmovq %r9,  0x08(%rsi)
	rmmovq %r10, 0x10(%rsi)
	rOnly3_ele0:
		andq %r8, %r8
		jle rOnly3_ele1
		iaddq $1, %rax
	rOnly3_ele1:
		andq %r9, %r9
		jle rOnly3_ele2
		iaddq $1, %rax
	rOnly3_ele2:
		andq %r10, %r10
		jle Done
		iaddq $1, %rax
	ret
rLeast4:                    # %rdx in [1 ... k], represents r in [4 ... (k + 3)]
	rmmovq %r8, 0x00(%rsi)
	rmmovq %r9, 0x08(%rsi)
	rLeast4_ele0:
		andq %r8,%r8
		jle rLeast4_ele1
		iaddq $1, %rax
	rLeast4_ele1:
		andq %r9, %r9
		jle rLeast4_ele2
		iaddq $1, %rax
	rLeast4_ele2:
		iaddq $16, %rdi
		iaddq $16, %rsi
		jmp rLeast2         # %rdx in [1 ... (k - 2)], represents r in [2 ... (k + 1)]

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
